library(swirl)
library(xlsx)
install.packages(c("twiteR", "Rcurl", "RJSONIO", "stringr", "tm", "wordcloud"))
library(twitteR)
install.packages("shiny")
install.packages(c("devtools", "rjson", "bit64", "httr"))
install.packages("twitteR")
library(devtools)
library(twitteR)
api_key <- "D7nDsCc223XOl4eohBbVXiGDF"
api_secret <- "hfj22LfbyuD7uieZtvkYSnhZyihMt3B9GfyBprcH5qTjYmZMPp"
access_token <- "Y102812610-PhBtqlvB4355n3U8KDMBd2dV1I1HH8hqceV3cOh2"
access_token_secret <- "OrllLDcue96uK0oKsyNOaopwtiEnhMctdh1R1guJNY7pt"
setup_twitter_oauth(api_key,api_secret)
setup_twitter_oauth(api_key,api_secret)
library(devtools)
library(twitteR)
api_key <- "D7nDsCc223XOl4eohBbVXiGDF"
api_secret <- "hfj22LfbyuD7uieZtvkYSnhZyihMt3B9GfyBprcH5qTjYmZMPp"
access_token <- "Y102812610-PhBtqlvB4355n3U8KDMBd2dV1I1HH8hqceV3cOh2"
access_token_secret <- "OrllLDcue96uK0oKsyNOaopwtiEnhMctdh1R1guJNY7pt"
setup_twitter_oauth(api_key,api_secret)
library(devtools)
library(twitteR)
api_key <- "D7nDsCc223XOl4eohBbVXiGDF"
api_secret <- "hfj22LfbyuD7uieZtvkYSnhZyihMt3B9GfyBprcH5qTjYmZMPp"
access_token <- "Y102812610-PhBtqlvB4355n3U8KDMBd2dV1I1HH8hqceV3cOh2"
access_token_secret <- "OrllLDcue96uK0oKsyNOaopwtiEnhMctdh1R1guJNY7pt"
setup_twitter_oauth(api_key,api_secret)
setup_twitter_oauth(api_key,api_secret)[2]
setup_twitter_oauth(api_key,api_secret)
setup_twitter_oauth(api_key, api_secret,access_token, access_token_secret)
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
setup_twitter_oauth(api_key, api_secret)
api_key <- "ZiOBYtjPWvDKdwh9ZFBf0AJl4"
api_secret <- "EQUNUupNtvhN5CPoWQOtQqOAVXXPKkPbolNY7sUXMWJf62Ex4E"
access_token <- "102812610-PhBtqlvB4355n3U8KDMBd2dV1I1HH8hqceV3cOh2"
access_token_secret <- "OrllLDcue96uK0oKsyNOaopwtiEnhMctdh1R1guJNY7pt"
setup_twitter_oauth(api_key, api_secret)
searchTwitter("iphone", n = 1)
searchTwitter("iphone")
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
searchTwitter("iphone", n =2)
searchTwitter("nicolas maduro")
searchTwitter("from : qalfredo14")
searchTwitter("from : @alfredoq14")
searchTwitter("from : DolarToday")
searchTwitter("from : DolarToday", resultType = recent)
searchTwitter("from : DolarToday", resultType = "recent")
searchTwitter("from : DolarToday", n=20)
searchTwitter("from : DolarToday", n=20)
userTimeline("DolarToday")
install.packages("tm")
install.packages("sentimentr")
install.packages("SentimentAnalysis")
library(tm)
library(SentimentAnalysis)
timeline_corpus <- Corpus(timeline)
library(twitteR)
api_key <- "ZiOBYtjPWvDKdwh9ZFBf0AJl4"
api_secret <- "EQUNUupNtvhN5CPoWQOtQqOAVXXPKkPbolNY7sUXMWJf62Ex4E"
access_token <- "102812610-PhBtqlvB4355n3U8KDMBd2dV1I1HH8hqceV3cOh2"
access_token_secret <- "OrllLDcue96uK0oKsyNOaopwtiEnhMctdh1R1guJNY7pt"
setup_twitter_oauth(api_key, api_secret, access_token, access_token_secret)
timeline <- userTimeline("DolarToday", n = 1000)
library(tm)
library(SentimentAnalysis)
timeline_corpus <- Corpus(timeline)
class(timeline)
timeline <- as.vector(timeline)
timeline_corpus <- Corpus(timeline)
timeline_corpus <- Corpus(VectorSource(timeline))
timeline_corpus = tm_map(timeline_corpus, removeNumbers)
timeline_corpus = tm_map(timeline_corpus, removePunctuation)
timeline_corpus = tm_map(timeline_corpus, removeWords, c(stopwords("spanish")))
timeline_corpus = tm_map(timeline_corpus, stripWhitespace)
sentiment <- analyzeSentiment(timeline_corpus)
View(sentiment)
timeline_corpus
length(timeline)
sentiment <- analyzeSentiment(timeline_corpus, language = spanish)
sentiment <- analyzeSentiment(timeline_corpus, language = "spanish")
View(sentiment)
timeline
sentiment <- analyzeSentiment(timeline, language = "spanish")
timeline <- unlist(timeline)
class(timeline)
timelinev <- unlist(timeline)
class(timelinev)
timelinev = unlist(timeline)
class(timelinev)
timelinev = c(timeline)
class(timelinev)
timelinev <- c()
for(i in 1:751){
timelinev[i] = timeline[i]
}
class(timeline)
class(timelinev)
timelinev <- c()
class(timelinev)
timeline[1]
for(i in 1:751){
timelinev[i] = as.character(timeline[i])
}
class(timelinev)
timelinev
timelinev[1]
for(i in 1:751){
timelinev[i] = unlist(timeline[i])
}
timelinev[1]
class(timelinev)
class(timeline[1])
class(timeline[[1]])
timeline_corpus <- Corpus(ListSource(timeline))
timeline_corpus <- Corpus(VectorSource(timeline))
timeline_corpus = tm_map(timeline_corpus, removeNumbers)
timeline_corpus = tm_map(timeline_corpus, removePunctuation)
timeline_corpus = tm_map(timeline_corpus, removeWords, c(stopwords("spanish")))
timeline_corpus = tm_map(timeline_corpus, stripWhitespace)
dtm <- DocumentTermMatrix(timeline_corpus)
dtm
View(dtm)
View(dtm[3])
timeline[[2]]
class(timeline[[2]])
timeline[[1][1]]
timeline[1[1]]
timeline$getText()
timeline[[1]]$text
timelinev <- c()
for(i in 1:751){
timelinev[i] = (timeline[[i]]$text)
}
class(timeline)
class(timelinev)
timelinev
timeline_corpus <- Corpus(VectorSource(timelinev))
timeline_corpus = tm_map(timeline_corpus, removeNumbers)
timeline_corpus = tm_map(timeline_corpus, removePunctuation)
timeline_corpus = tm_map(timeline_corpus, removeWords, c(stopwords("spanish")))
timeline_corpus = tm_map(timeline_corpus, stripWhitespace)
dtm <- DocumentTermMatrix(timeline_corpus)
inspect(dtm)
sentiment <- analyzeSentiment(timeline, language = "spanish")
sentiment <- analyzeSentiment(timelinev, language = "spanish")
sentiment <- analyzeSentiment(timeline_corpus, language = "spanish")
View(sentiment)
plotSentiment(sentiment)
data("DictionaryGI")
summary(DictionaryGI)
library(ggplot2)
plotly_POST(p, filename = "r-docs/Euro Stock Indexes Plot")
library(plotly)
fecha <- seq(as.Date('1991-01-01'), by = "days", length = 1860)
p <- plot_ly(as.data.frame(EuStockMarkets), x = fecha) %>%
add_trace(y = as.data.frame(EuStockMarkets)$SMI, mode = 'lines', name = "SMI") %>%
add_trace(y = as.data.frame(EuStockMarkets)$CAC, mode = 'lines', name = "CAC") %>%
add_trace(y = as.data.frame(EuStockMarkets)$DAX, mode = 'lines', name = "DAX") %>%
add_trace(y = as.data.frame(EuStockMarkets)$FTSE, mode = 'lines', name = "FTSE") %>%
layout(title = "European Stock Indices", xaxis = list(title = "Years"), yaxis = list(title = "Value"))
plotly_POST(p, filename = "r-docs/Euro Stock Indexes Plot")
plotly_POST(p, filename = "r-docs/Euro Stock Indexes Plot")
library(plotly)
library(class)
data("iris")
p <- plot_ly(iris, x = ~Sepal.Length, y = ~Sepal.Width, color = ~Species)
set.seed(123)
tr <- sample(1:nrow(iris), nrow(iris)*70/100)
training_set <- iris[tr, ]
testing_set <- iris[-tr, ]
knn_model <- knn(training_set[, -5], testing_set[, -5], iris$Species[tr], k = 10)
cm <- table(knn_model, iris$Species[-tr])
tab <- data.frame(cm[1, ], cm[2, ], cm[3, ])
colnames(tab) <- c("setosa", "versicolor", "virginica")
tab
v <- c()
vv <- 1:150
for (i in vv[-tr]){
if (knn_model[i] == iris$Species[i]) {
v <- c(v, "Well Clasified")
}else{ v <- "Bad Classified"}
}
v
v <- c()
vv <- 1:150
for (i in vv[-tr]){
if (knn_model[i] == iris$Species[i]) {
v <- c(v, "Well Clasified")
}else{ v <- c(v,"Bad Classified")}
}
v
knn_model
vv
vv[-tr]
iris$Species[-tr]
j <- iris$Species[-tr]
j[45]
v <- c()
vv <- 1:150
j <-iris$Species[-tr]
for (i in 1:45){
if (knn_model[i] == j[i]) {
v <- c(v, "Well Clasified")
}else{ v <- c(v,"Bad Classified")}
}
p <- plot_ly(testing_set, x = testing_set$Sepal.Length, y = testing_set$Sepal.Width, color = ~Species, size = 0.5, text = v)
p
shiny::runApp('Coursera/Developing Data Products/Testing_Classification_Algorithms')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='quintana', token='2768C47859AAD0AF5B755D1605E51FCF', secret='+A9Xvy8564wRWIjBFOZMGV4iXdnw1B8Ipe33zChb')
library(rsconnect)
rsconnect::deployApp('C:\Users\quint\Documents\Coursera\Developing Data Products\Testing_Classification_Algorithms')
setwd("~/Coursera/Developing Data Products")
rsconnect::deployApp('Testing_Classification_Algorithms/')
rsconnect::deployApp('Testing_Classification_Algorithms')
rsconnect::deployApp('Testing_Classification_Algorithms')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
author("mydeck")
publish(user = "qalfredo", repo = "Testing-Classification-Algorithm", host = 'github')
git config --global user.email "alfredo.quintana.14@gmail.com"
publish(user = "qalfredo", repo = "Testing-Classification-Algorithm", host = 'github')
publish(user = "qalfredo", repo = "Testing-Classification-Algorithm", host = 'github')
publish(user = "alfredo.quintana.14@gmail.com", repo = "Testing-Classification-Algorithm", host = 'github')
publish(user = "Qalfredo", repo = "Testing-Classification-Algorithm", host = 'github')
publish(user = "Qalfredo", repo = "Testing-Classification-Algorithm", host = 'github')
